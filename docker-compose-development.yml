services:
  database_development:
    restart: always                                                                      
    image: postgre-non-root
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    shm_size: ${DATABASE_SHM_SIZE}
    command: >
      postgres
      -c config_file=/etc/postgresql.conf
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_min_duration_statement=${DATABASE_LOG_MIN_DURATION_STATEMENT}
      -c shared_buffers=${DATABASE_SHARED_BUFFERS}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:                                                                    
      - "${DATABASE_DATA_DIR}:/var/lib/postgresql/data:z"
      - "${DATABASE_CONF_FILE}:/etc/postgresql.conf"
      - "${DATABASE_BACKUP_DIR}:/backup"
      - "${DATABASE_LOG_DIR}:/var/log/postgresql:z"
  redis:
    restart: always
    image: redis:latest
    sysctls:
      net.core.somaxconn: 1024
  django_development:
    restart: always
    env_file:
      - .env.assets
    build:
      context: .
      dockerfile: docker/django/Dockerfile
      target: dev
    image: backend_v2_dev
    command: bash -c "DJANGO_SETTINGS_MODULE=backend.settings python manage.py collectstatic --noinput && gunicorn --reload backend.wsgi:application --workers=${GUNICORN_WORKERS} --log-file=${GUNICORN_LOG}/gunicorn.log --log-level=${GUNICORN_LOG_LEVEL} -b '[::]:80' --worker-tmp-dir /dev/shm --timeout ${GUNICORN_TIMEOUT} "
    volumes:
      - ./src:/backend/src
      - ${STATIC_ROOT}:${STATIC_ROOT}
      - ${MEDIA_ROOT}:${MEDIA_ROOT}
      - ${GUNICORN_LOG}:${GUNICORN_LOG}
      - ${DJANGO_LOG_DIR}:${DJANGO_LOG_DIR}
    depends_on:
      - database_development
      - redis
      - neo4j
    working_dir: /backend/src
    ports:
      - "${EXTERNAL_PORT_DEVELOPMENT}:80"
  neo4j:
    image: neo4j:4.4-enterprise
    restart: unless-stopped
    ports:
      - ${NEO4J_7474_EXTERNAL_PORT}:7474
      - 7473:7473
      - ${NEO4J_7687_EXTERNAL_PORT}:7687
      - 5000:5000
      - 6000:6000
      - 7000:7000
    volumes:
      - ${NEO4J_CONF}:/conf
      - ${NEO4J_DATA}:/data
      - ${NEO4J_IMPORT}:/import
      - ${NEO4J_LOGS}:/logs
      - ${NEO4J_PLUGINS}:/plugins
      - ${NEO4J_BACKUP}:/backup
      - ${NEO4J_CERTIFICATES}:/ssl
    environment: 
      # Raise memory limits
      #- NEO4J_dbms_memory_pagecache_size=1G
      #- NEO4J_dbms.memory.heap.initial_size=1G
      #- NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      #- NEO4J_dbms_security_auth__enabled=false
      - NEO4J_dbms.security.auth_lock_time=0s
      - NEO4J_dbms.connector.http.enabled=true
      - NEO4J_dbms.connector.https.enabled=true
      - NEO4J_dbms.connector.bolt.enabled=true
      - NEO4J_dbms.connector.bolt.listen_address=0.0.0.0:7687
      - NEO4J_dbms.connector.bolt.tls_level=OPTIONAL
      - NEO4J_dbms.ssl.policy.bolt.enabled=true
      - NEO4J_dbms.ssl.policy.bolt.base_directory=certificates/bolt
      - NEO4J_dbms.ssl.policy.bolt.private_key=privkey.pem
      - NEO4J_dbms.ssl.policy.bolt.public_certificate=fullchain.pem
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_apoc_trigger_enabled=true
      - NEO4JLABS_PLUGINS=["apoc"]