services:
  database_production:
    restart: always                                                                      
    image: postgres-non-root
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
      args:
        USER_ID: ${USER_ID:-0}
        GROUP_ID: ${GROUP_ID:-0}
    shm_size: ${DATABASE_SHM_SIZE}
    command: >
      postgres
      -c config_file=/etc/postgresql.conf
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_min_duration_statement=${DATABASE_LOG_MIN_DURATION_STATEMENT}
      -c shared_buffers=${DATABASE_SHARED_BUFFERS}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:                                                                    
      - "${DATABASE_DATA_DIR}:/var/lib/postgresql/data:z"
      - "${DATABASE_CONF_FILE}:/etc/postgresql.conf"
      - "${DATABASE_BACKUP_DIR}:/backup"
      - "${DATABASE_LOG_DIR}:/var/log/postgresql:z"
  redis_production:
    restart: always
    image: redis:latest
    sysctls:
      net.core.somaxconn: 1024
  django_production:
    restart: always
    env_file:
      - .env
    build:
      context: .
      dockerfile: docker/django/Dockerfile
      target: prod
    image: backend_prod
    command: bash -c "DJANGO_SETTINGS_MODULE=backend.settings python manage.py migrate --noinput && python manage.py collectstatic --noinput && gunicorn backend.wsgi:application --workers=${GUNICORN_WORKERS} --log-file=${GUNICORN_LOG}/gunicorn.log --log-level=${GUNICORN_LOG_LEVEL} -b '[::]:80' --worker-tmp-dir /dev/shm --timeout ${GUNICORN_TIMEOUT}"
    volumes:
      - ./src:/backend/src
      - ${STATIC_ROOT}:${STATIC_ROOT}
      - ${MEDIA_ROOT}:${MEDIA_ROOT}
      - ${GUNICORN_LOG}:${GUNICORN_LOG}
      - ${DJANGO_LOG_DIR}:${DJANGO_LOG_DIR}
    depends_on:
      - database_production
      - redis_production
    working_dir: /backend/src
    ports:
      - "${EXTERNAL_PORT_PRODUCTION}:80"